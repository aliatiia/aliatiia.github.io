{
  "1": {
    "title": "Dry lab",
    "content": "Overview: . Nobel laureate and biologist Sydney Brenner commented: . Biological research is in crisis, and in Alan Turing’s work there is much to guide us. Technology gives us the tools to analyze organisms at all scales, but we are drowning in a sea of data and thirsting for some theoretical framework with which to understand it. . Out of the ~7000 known rare diseases, only ~6% have existing therapies. It has increasingly become clear that underlying causalities in complex disease has more to do with the interaction of genes rather than one isolated problem in this or that gene. The aim of computational systems biology is to provide a holistic view of biological systems that could address this obstacle. . The overarching goal of my research is to establish sufficient and necessary conditions for observed systems properties and, more importantly, formulate falsifiable hypotheseses as to how to “debug” systems abberations (most notably cancer). . Illustrative example: . We can represent biological networks as graphs: the nodes are genes, and edges are interactions. An interaction from gene g1 to g2 can be promotional or inhibitory in nature, denoted on this example graph (right) by arrow- or bar-terminated directed edges, respectively. Suppose we are given infallible information from an Oracle that says: g2 and g3 should be promoted, g3 and g7 should be inhibited. We can encode the Oracle opinion as string A as seen on the right. We use &quot;0&quot; to indicate that the Oracle has no opinion on a given gene (note: the Oracle&#39;s opinion on g_x is denoted by a_x). The Oracle&#39;s opinion simulates evolutionary pressure: it is vital for the organism that this gene should be promoted or inhibited. | nodes = genes edges = interactions | . The adjaceny matrix M on the right encodes exactly the same information as the graph above: entry in row i column j is non-zero if there exists an interaction between gene i and gene j. The sign of such entry, + or -, indicates whether that interaction is promotional or inhibitory in nature, respectively (corresponding to arrow- or bar-terminated edges in the graph representation above, respectively). The green or red color of a matrix entry indicates whether that interacdtion supports or undermines the Oracle&#39;s opinion on the target gene. For example, the Oracle said gene 2 should be promoted, and gene 1 is doing exactly that (hence green +1 entry in row 1 column 2). But gene 1 is also inhibiting gene 4 which goes against what the Oracle said about g 4 (see above graph, a4 = +1), hence the red-colored entry -1 in row 1 column 4. Gene 1 is also promoting gene 7, while the Oracle said gene 7 should in fact be inhibited. | | . We score the genes based how many beneficial (green) or detrimental (red) interactions they&#39;re engaged in, whether exerting or receiving them. The benefit and damage score of gene i is the sum of green and red entries, respecgively, along row and column i (see the dotted row/column 3 in the previous figure, and the dotted row 3 in the scoreboard on the right). A beneficial or detrimental interactions factors in the scores of both the source and target genes of said interaction. Given this score boards, what is the ideal evolutionary path for the organism? What gene(s) should ideally be mutated/deleted in the next generations and which should be conserved as is, such that the total number of damaging interactions network-wide is kept to some tolerable threshold? This is the core optimization question that we study, we refer to it as the network evolution problem (NEP). Particulary, we ask: have the topological features of biological networks emerged in order to effectively minimize the computational cost of finding acceptably optimal solutions to this problem? | | . What is the evolutionary cost of finding acceptable solutions to NEP? How many generations of random-variation non-random selection (RVnRS) would it take before just the right set of genes have been mutated advantageously, moving the network away from a deleterious and into and advantageous state (one where the total number of Oracle-contradicting damaging interactions are under a tolerable threshold)? The well-known knapsack optimization problem (KOP) is reducible to NEP and as such the latter belongs to the same computational complexity class (&quot;difficulty&quot;) as the former. More concretely, any KOP instance can be turned into a corresponding (fictional) biological network under stress, i.e. an NEP instance. The hypothetical stressed network discussed above is in fact a mirror of the KOP instance on the right figure (objects = genes, values/weights = benefits/damages). The laptop for example corresponds to gene 2. Therefore, this evolutionary optimization problem is at least as hard as the knapsack problem. KOP is in practice an easy problem to solve, and there exist performant approximation algorithm. That is, of course, if one is at liberty to choose an algorithm. In evolutionary context, however, the only available algorithm is RVnRS, and therefore computational difficulty of NEP must be measured against it. | | . Semantically, NEP can be interpreted in the context of regulation: what genes should ideally be promoted and which inhibited, such that the total number of damaging interactions (in light of some eolutionary pressure) is minimal to a threshold? The above hypothetical network therefore can be considered as one representing the interaction network of co-expressed genes in the cytoplasm as depicted the right figure. | | . Alternatively, and without syntactic modifications, NEP can also be interpreted as: which genes should be mutated/deleted and which conserved such that the total number of damaging interactions (in light of some eolutionary pressure) is minimal to a threshold? | | . .",
    "url": "https://aliatiia.github.io/research/dry-lab/",
    "relUrl": "/research/dry-lab/"
  },
  "2": {
    "title": "Home",
    "content": "The theoretical component of my research relates the computational complexity law to the evolution of topological properties in biological networks. The experimental component involves experimental methods in the areas of DNA/RNA computing nanotechnology. . . The evolution of topology in biological networks | Cells come under evolutionary pressure to alter what, when and whether some genes should be expressed at a given moment in their life cycle. A gene can be assigned benefit/damage scores denoting the degree to which its expression provides (dis)advantage to the organism under said pressure. A gene may therefore be an asset (benefit &gt; 0 and damage = 0), a liability (b = 0, d &gt; 0), or both (b &gt; 0, d &gt; 0). What subset of genes should be deleted/mutated, and which should be conserved, such that the total number of damaging interactions is minimized to a tolerable threshold? This optimization question can be defined formally, and the difficulty of answering it seems to directly depend on the topology of biological networks Read more .. | . The idea of using the resilient, ancient, and fine-tuned DNA (deoxyribonucleic acid) for material purposes has attracted researchers for decades. Amazing 2D and 3D nano-structures have been demonstrated. DNA as an immobilization (2D) or containerization (3D) substrate has many exciting potential usecases. Can such structures be produced at an industrial-grade throughput and with acceptable cost-to-yeild ratio? &nbsp;&nbsp;Read more .. | Programmable fabrication of DNA nano-structures | . .",
    "url": "https://aliatiia.github.io/",
    "relUrl": "/"
  },
  "3": {
    "title": "Publications",
    "content": "2019 . The Emergence of Component and Sign Distribution in Biological Networks Ali Atiia, In preparation (draft). . 2019 . The Computational Intractability Law Molds the Topology of Biological Networks Ali Atiia, Corbin Hopper, Katsumi Inoue, Silvia Vidal, and Jérôme Waldispühl . Submitted. . 2018 . The Computational Weight of Biological Processes Ali A Atiia, Doctoral dissertation, McGill University. . 2017 . Computational Intractability Generates the Topology of Biological Networks Ali A Atiia, Corbin Hopper, and Jérôme Waldispühl. Proceedings of the 8th ACM-BCB (pp. 500-509). . 2017 . DNA Knitting: robust and programmable fabrication of DNA nano-structures at sub- nanometer resolution Ali A Atiia. Technical report. . 2016 . Curated Repository of Experimentally-validated Biological Networks Ali A Atiia. Technical report. . 2016 . Single-Primer Polymerase Chain Reactions Ali A Atiia. Manuscript. . 2015 . A Molecular Algorithm Solving NP- Complete Problems by Mimicking the Cell Ali A Atiia. Technical Report. . 2011 . DNA Computation of Solutions to Edge-Matching Puzzles Ali Atiia. Master dissertation, Concordia University .",
    "url": "https://aliatiia.github.io/publications/",
    "relUrl": "/publications/"
  },
  "4": {
    "title": "Research",
    "content": "Topological Properties of Biological Networks: . Understanding why and how topological properties in biological networks have emerged: . Besides the familiar “hardware” evolutionary optimizations (long necks in giraffes, optimal width and sturdy material of blood vessels, compartmentalization of sub-cellular components, and stably-folded proteins at extreme temperatures), can we identify “software” optimization in degree, component and sign distributions of biological networks? . | Can we derive sufficient and necessary conditions for the emergence of soft topological properties in biological networks? Can we generate falsifiable system-level hypotheses based on said conditions? . | To what degree and how has the law of computational complexity shaped the emergence of topological properties in biological networks? . | . Read more .. . DNA Knitting: . A programmable method for the achieving industrial-level throughput fabrication of DNA nano-sturctures: . Material (think ~ malloc): dNTPs. . | Labor (def fun{}): Polymerase, Ligase (stitch), and Kinase. . | Blueprint (argv=[p1,..pn]): DNA primers. . | . Read more .. . DNA/RNA Computing: . Characterizing the limit of PCR as a computational tool vis-à-vis the inherent intractability of NP-Complete problems. . | NP-Completeness and Cellular Regulation: can DNA/RNA based computation give us insights into the inherent difficulty of debugging gene co-expression malfunctions ? . | . Read more .. .",
    "url": "https://aliatiia.github.io/research/",
    "relUrl": "/research/"
  },
  "5": {
    "title": "Résumé",
    "content": "Curriculum Vitae: . . Download PDF . . .",
    "url": "https://aliatiia.github.io/resume/",
    "relUrl": "/resume/"
  },
  "6": {
    "title": "Software",
    "content": "Evolution by Computational Selection . Documentation WIP . Data analysis and visualization . Documentation WIP . Design of DNA Nanoshapes . Documentation WIP . . View on GitHub .",
    "url": "https://aliatiia.github.io/software/",
    "relUrl": "/software/"
  },
  "7": {
    "title": "Wet lab",
    "content": "Overview: . The resilient and ancient deoxyribonucleic acid (DNA) encodes the blueprint of the machinary of life. But it has in recent decades attracted interest for material purposes. . In one avenue of research, DNA has proven to be a sturdy and, more importantly, programmable substrate with which intricate 2D and 3D nano-structures can be fabricated, with exciting potential usecases. . In another avenue, DNA has been used as a computational medium. Adleman kicked off this line of this research with an insightful demonstration of a DNA-based computation of an instance of the NP-Complete Hamiltonian Path Problem (HPP), inspiring many subsequent demonstrations. . DNA Knitting: . The inspiration for this method originated from a DNA-based computation of an instance of the NP-complete edge-matching puzzles. . More details.. . DNA/RNA Computing: . It was known from the start that, while its “bit” is extremely tiny compared those in silicon-based computers, DNA will not push the limits of what can be solved practically. The inherent intractability of NP-Complete problems still manifests in DNA computing manifests itself by requiring an exponential molar amount of DNA strands to guarantee a successful computation, analogous to how in-silico NPC algorithms require CPU/memory resources that are exponential in problem size. To solve a 200-node HPP instance, for example, would require an amount of raw DNA that is greater than Earth in mass (Hartmanis, Juris. “On the weight of computations.” EATCS Bulletin 55 (1995): 136-138. See also p. 70, lower paragraph, in this thesis). .",
    "url": "https://aliatiia.github.io/research/wet-lab/",
    "relUrl": "/research/wet-lab/"
  }
  
}
